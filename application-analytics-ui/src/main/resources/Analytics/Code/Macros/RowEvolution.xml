<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Analytics.Code.Macros.RowEvolution" locale="">
  <web>Analytics.Code.Macros</web>
  <name>RowEvolution</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Analytics.Code.Macros.RowEvolution</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>9fc4c61e-9ad5-4ca3-9cc7-41d424a82a3a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>require.config({
  paths: {
    'chartjs': 'https://cdn.jsdelivr.net/npm/chart.js/dist/Chart.min',
  }
});

require(['jquery', 'chartjs'], ($) =&gt; {
  const PERIODS = ["Day", "Week", "Month", "Year"];
  let chart;
  let currentModal;
  let currentOptions;
  /**
   * Creates the chart for displaying the data.
   *
   * @param data json with the dataset for the current page.
   */
  const renderChart = (data) =&gt; {
    const dates = data.map(item =&gt; item.date);
    const field = data.map(item =&gt; item[currentModal.find('.analyticsApplicationRowEvolutionField').val()] || 0);
    const ctx = currentModal.find('.analyticsChartisplay');
    if (chart) {
      chart.destroy();
    }
    chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: dates,
        datasets: [{
          label: '',
          data: field,
          borderColor: 'rgba(75, 192, 192, 1)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          fill: false
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    currentModal.modal('show');
  };

  /**
   * Fetches the data from Matomo using the XWiki server as a proxy through the RowEvolutionJSON page. It then saves the data in session 
   * storage for easy access. This allows the user to display a different field for the same time interval without making a new request and updates the chart.
   *
   * @param  parameter that will identify the row in the matomo table
   */
  const fetchChartData = (parameter) =&gt; {
    currentOptions.data('parameter', parameter);
    const period = currentOptions.data('period');
    const date = currentOptions.data('date');
    const requestPage = currentOptions.data('requestPage');
    const macroName=currentOptions.data('macroName');
    $.getJSON(`${requestPage}?parameter=${parameter}&amp;period=${period}&amp;date=last${date}&amp;macroName=${macroName}`)
      .done((data) =&gt; {
        window.sessionStorage.setItem('analyticsLastRequestCache', JSON.stringify(data));
        renderChart(data);
      })
      .fail((jqxhr, textStatus, error) =&gt; {
        const err = `${textStatus}, ${error}`;
        console.error(`Request Failed: ${err}`);
      });
  };

  /**
   * Would search for the element that matches the current period, display its time, and hide the other periods time.
   * 
   * @param period period day/week/month/year
   */
  const displayPeriodDurations = (period) =&gt; {
    currentModal.find('[class^="analyticsApplicationRowEvolutionDuration"]').not(`.analyticsRowEvolutionModal .analyticsApplicationRowEvolutionDuration${period}`).hide();
    currentModal.find(`.analyticsApplicationRowEvolutionDuration${period}`).show();
    currentOptions.data('period', period.toLowerCase());
    currentOptions.data('date', $(`.analyticsApplicationRowEvolutionDuration${period}`).val());
  };

  /**
   * Resets all the selectors for the current modal when opened.
   */

  $(document).on('show.bs.modal', '.analyticsRowEvolutionModal', function (e) {
    let modal = $(e.target);
    modal.find('[class^="analyticsApplicationRowEvolutionDuration"]').each(function () { $(this).prop('selectedIndex', 0) })
    modal.find('.analyticsApplicationRowEvolutionField').prop('selectedIndex', 0);
    modal.find('[class^="analyticsApplicationRowEvolutionDuration"]').not('.analyticsApplicationRowEvolutionDurationDay').hide();
    modal.find('.analyticsApplicationRowEvolutionDurationDay').show();
    currentOptions.data('period', 'day');
    currentOptions.find('.analyticsRowEvolutionOptions').data('date', $('.analyticsApplicationRowEvolutionDurationDay').val());
  });
  $(document).on('keyup change', '.analyticsRowEvolutionModal .analyticsApplicationRowEvolutionField', function () {
    renderChart(JSON.parse(window.sessionStorage.getItem('analyticsLastRequestCache')));
  });

  /**
   * Handles the click event on the RowEvolution buttons. It will save the current modal and current options div for easy of use and 
   * fetches the data for the default parameters.
   */
  $(document).on('click', '.analyticsActions .analyticsRowEvolution', function () {
    const parameter = $(this).data('parameter');
    currentModal = $(this).closest('.xwiki-livetable-container').next('.analyticsRowEvolutionModal');
    currentOptions = currentModal.find('.analyticsRowEvolutionOptions');
    fetchChartData(parameter);
  });

  /**
   * Handles the update of the chart when the time is changed.
   * 
   */
  $(document).on('keyup change', '.analyticsRowEvolutionModal [class^="analyticsApplicationRowEvolutionDuration"]', function () {
    currentOptions.data('date', $(this).val());
    fetchChartData(currentOptions.data('parameter'));
  });

  /**
   * Handles the update of the chart when the period is changed.
   */
  $(document).on("keyup change", '.analyticsRowEvolutionModal .analyticsApplicationModalPeriodSelect', function () {
    const period = $(this).val();
    displayPeriodDurations(period);
    fetchChartData(currentOptions.data('parameter'));
  })

  $(document).ready(() =&gt; {
  });
});
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
